// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: records.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Task states.
type State int32

const (
	State_STATE_NONE_UNSPECIFIED State = 0
	State_STATE_INITIAL          State = 1
	State_STATE_QUEUED           State = 2
	State_STATE_RUNNING          State = 7
	// These are end states.
	State_STATE_COMPLETED State = 42
	State_STATE_TIMED_OUT State = 90
	State_STATE_ABORTED   State = 91
	State_STATE_FAILED    State = 92
	State_STATE_REJECTED  State = 93
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "STATE_NONE_UNSPECIFIED",
		1:  "STATE_INITIAL",
		2:  "STATE_QUEUED",
		7:  "STATE_RUNNING",
		42: "STATE_COMPLETED",
		90: "STATE_TIMED_OUT",
		91: "STATE_ABORTED",
		92: "STATE_FAILED",
		93: "STATE_REJECTED",
	}
	State_value = map[string]int32{
		"STATE_NONE_UNSPECIFIED": 0,
		"STATE_INITIAL":          1,
		"STATE_QUEUED":           2,
		"STATE_RUNNING":          7,
		"STATE_COMPLETED":        42,
		"STATE_TIMED_OUT":        90,
		"STATE_ABORTED":          91,
		"STATE_FAILED":           92,
		"STATE_REJECTED":         93,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_records_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_records_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{0}
}

// Levels for events.
type Level int32

const (
	Level_LEVEL_NONE_UNSPECIFIED Level = 0
	Level_LEVEL_EMERGENCY        Level = 1
	Level_LEVEL_ALERT            Level = 2
	Level_LEVEL_CRITICAL         Level = 3
	Level_LEVEL_ERROR            Level = 4
	Level_LEVEL_WARN             Level = 5
	Level_LEVEL_NOTICE           Level = 6
	Level_LEVEL_INFO             Level = 7
	Level_LEVEL_DEBUG            Level = 8
)

// Enum value maps for Level.
var (
	Level_name = map[int32]string{
		0: "LEVEL_NONE_UNSPECIFIED",
		1: "LEVEL_EMERGENCY",
		2: "LEVEL_ALERT",
		3: "LEVEL_CRITICAL",
		4: "LEVEL_ERROR",
		5: "LEVEL_WARN",
		6: "LEVEL_NOTICE",
		7: "LEVEL_INFO",
		8: "LEVEL_DEBUG",
	}
	Level_value = map[string]int32{
		"LEVEL_NONE_UNSPECIFIED": 0,
		"LEVEL_EMERGENCY":        1,
		"LEVEL_ALERT":            2,
		"LEVEL_CRITICAL":         3,
		"LEVEL_ERROR":            4,
		"LEVEL_WARN":             5,
		"LEVEL_NOTICE":           6,
		"LEVEL_INFO":             7,
		"LEVEL_DEBUG":            8,
	}
)

func (x Level) Enum() *Level {
	p := new(Level)
	*p = x
	return p
}

func (x Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Level) Descriptor() protoreflect.EnumDescriptor {
	return file_records_proto_enumTypes[1].Descriptor()
}

func (Level) Type() protoreflect.EnumType {
	return &file_records_proto_enumTypes[1]
}

func (x Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Level.Descriptor instead.
func (Level) EnumDescriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{1}
}

// Registration information.
type Registration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"` // allow for on-the-fly device registrations.
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Info          *Generic               `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Registration) Reset() {
	*x = Registration{}
	mi := &file_records_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{0}
}

func (x *Registration) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Registration) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Registration) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Registration) GetInfo() *Generic {
	if x != nil {
		return x.Info
	}
	return nil
}

// Status event from the device.
// Note: The task and step values indicate the status is for a task step.
//
//	And you can get multiple statuses from a task and/or task step.
//	In most cases, the end state should indicate that you will get no
//	more messages for a task and/or task step.
//	But that's left to the implementer ...
type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          string                 `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Step          string                 `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	State         State                  `protobuf:"varint,3,opt,name=state,proto3,enum=local.grpc.telegraph.State" json:"state,omitempty"` // No state indicates progress [bar]!!
	Info          *Generic               `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_records_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *Status) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Status) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_NONE_UNSPECIFIED
}

func (x *Status) GetInfo() *Generic {
	if x != nil {
		return x.Info
	}
	return nil
}

// Metrics information sent from the device.
type Metrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Measures      []*Generic             `protobuf:"bytes,2,rep,name=measures,proto3" json:"measures,omitempty"` // tandem, ftw!
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	mi := &file_records_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{2}
}

func (x *Metrics) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Metrics) GetMeasures() []*Generic {
	if x != nil {
		return x.Measures
	}
	return nil
}

// Incident event sent from the device.
type Incident struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      Level                  `protobuf:"varint,1,opt,name=category,proto3,enum=local.grpc.telegraph.Level" json:"category,omitempty"`
	Info          *Generic               `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Incident) Reset() {
	*x = Incident{}
	mi := &file_records_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Incident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incident) ProtoMessage() {}

func (x *Incident) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incident.ProtoReflect.Descriptor instead.
func (*Incident) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{3}
}

func (x *Incident) GetCategory() Level {
	if x != nil {
		return x.Category
	}
	return Level_LEVEL_NONE_UNSPECIFIED
}

func (x *Incident) GetInfo() *Generic {
	if x != nil {
		return x.Info
	}
	return nil
}

// Timing event sent from the device.
type Timing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Info          *Generic               `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timing) Reset() {
	*x = Timing{}
	mi := &file_records_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{4}
}

func (x *Timing) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Timing) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Timing) GetInfo() *Generic {
	if x != nil {
		return x.Info
	}
	return nil
}

// Trace event sent from the device.
type Trace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Location      *Fields                `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Info          *Generic               `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_records_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{5}
}

func (x *Trace) GetLocation() *Fields {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Trace) GetInfo() *Generic {
	if x != nil {
		return x.Info
	}
	return nil
}

// Message being sent from the device - the record (top-10 list!).
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Record_Empty
	//	*Record_Ack
	//	*Record_Registration
	//	*Record_Status
	//	*Record_Incident
	//	*Record_Metrics
	//	*Record_Timing
	//	*Record_Trace
	//	*Record_Generic
	Kind          isRecord_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_records_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{6}
}

func (x *Record) GetKind() isRecord_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Record) GetEmpty() *Empty {
	if x != nil {
		if x, ok := x.Kind.(*Record_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

func (x *Record) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Kind.(*Record_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *Record) GetRegistration() *Registration {
	if x != nil {
		if x, ok := x.Kind.(*Record_Registration); ok {
			return x.Registration
		}
	}
	return nil
}

func (x *Record) GetStatus() *Status {
	if x != nil {
		if x, ok := x.Kind.(*Record_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *Record) GetIncident() *Incident {
	if x != nil {
		if x, ok := x.Kind.(*Record_Incident); ok {
			return x.Incident
		}
	}
	return nil
}

func (x *Record) GetMetrics() *Metrics {
	if x != nil {
		if x, ok := x.Kind.(*Record_Metrics); ok {
			return x.Metrics
		}
	}
	return nil
}

func (x *Record) GetTiming() *Timing {
	if x != nil {
		if x, ok := x.Kind.(*Record_Timing); ok {
			return x.Timing
		}
	}
	return nil
}

func (x *Record) GetTrace() *Trace {
	if x != nil {
		if x, ok := x.Kind.(*Record_Trace); ok {
			return x.Trace
		}
	}
	return nil
}

func (x *Record) GetGeneric() *Generic {
	if x != nil {
		if x, ok := x.Kind.(*Record_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

type isRecord_Kind interface {
	isRecord_Kind()
}

type Record_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type Record_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type Record_Registration struct {
	Registration *Registration `protobuf:"bytes,3,opt,name=registration,proto3,oneof"`
}

type Record_Status struct {
	Status *Status `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

type Record_Incident struct {
	Incident *Incident `protobuf:"bytes,5,opt,name=incident,proto3,oneof"`
}

type Record_Metrics struct {
	Metrics *Metrics `protobuf:"bytes,6,opt,name=metrics,proto3,oneof"`
}

type Record_Timing struct {
	Timing *Timing `protobuf:"bytes,7,opt,name=timing,proto3,oneof"`
}

type Record_Trace struct {
	Trace *Trace `protobuf:"bytes,8,opt,name=trace,proto3,oneof"`
}

type Record_Generic struct {
	// Leave some room for growth - #15 still takes only 1 byte to encode.
	Generic *Generic `protobuf:"bytes,15,opt,name=generic,proto3,oneof"`
}

func (*Record_Empty) isRecord_Kind() {}

func (*Record_Ack) isRecord_Kind() {}

func (*Record_Registration) isRecord_Kind() {}

func (*Record_Status) isRecord_Kind() {}

func (*Record_Incident) isRecord_Kind() {}

func (*Record_Metrics) isRecord_Kind() {}

func (*Record_Timing) isRecord_Kind() {}

func (*Record_Trace) isRecord_Kind() {}

func (*Record_Generic) isRecord_Kind() {}

var File_records_proto protoreflect.FileDescriptor

var file_records_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x71, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9b, 0x01, 0x0a,
	0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x97, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12,
	0x48, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0xbe, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x2a, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x5a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x5c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x5d, 0x2a, 0xb1, 0x01, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x08, 0x42,
	0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61,
	0x6d, 0x72, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_records_proto_rawDescOnce sync.Once
	file_records_proto_rawDescData []byte
)

func file_records_proto_rawDescGZIP() []byte {
	file_records_proto_rawDescOnce.Do(func() {
		file_records_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_records_proto_rawDesc), len(file_records_proto_rawDesc)))
	})
	return file_records_proto_rawDescData
}

var file_records_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_records_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_records_proto_goTypes = []any{
	(State)(0),                    // 0: local.grpc.telegraph.State
	(Level)(0),                    // 1: local.grpc.telegraph.Level
	(*Registration)(nil),          // 2: local.grpc.telegraph.Registration
	(*Status)(nil),                // 3: local.grpc.telegraph.Status
	(*Metrics)(nil),               // 4: local.grpc.telegraph.Metrics
	(*Incident)(nil),              // 5: local.grpc.telegraph.Incident
	(*Timing)(nil),                // 6: local.grpc.telegraph.Timing
	(*Trace)(nil),                 // 7: local.grpc.telegraph.Trace
	(*Record)(nil),                // 8: local.grpc.telegraph.Record
	(*Generic)(nil),               // 9: local.grpc.telegraph.Generic
	(*Tag)(nil),                   // 10: local.grpc.telegraph.Tag
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*Fields)(nil),                // 12: local.grpc.telegraph.Fields
	(*Empty)(nil),                 // 13: local.grpc.telegraph.Empty
	(*Ack)(nil),                   // 14: local.grpc.telegraph.Ack
}
var file_records_proto_depIdxs = []int32{
	9,  // 0: local.grpc.telegraph.Registration.info:type_name -> local.grpc.telegraph.Generic
	0,  // 1: local.grpc.telegraph.Status.state:type_name -> local.grpc.telegraph.State
	9,  // 2: local.grpc.telegraph.Status.info:type_name -> local.grpc.telegraph.Generic
	10, // 3: local.grpc.telegraph.Metrics.tag:type_name -> local.grpc.telegraph.Tag
	9,  // 4: local.grpc.telegraph.Metrics.measures:type_name -> local.grpc.telegraph.Generic
	1,  // 5: local.grpc.telegraph.Incident.category:type_name -> local.grpc.telegraph.Level
	9,  // 6: local.grpc.telegraph.Incident.info:type_name -> local.grpc.telegraph.Generic
	11, // 7: local.grpc.telegraph.Timing.start:type_name -> google.protobuf.Timestamp
	11, // 8: local.grpc.telegraph.Timing.end:type_name -> google.protobuf.Timestamp
	9,  // 9: local.grpc.telegraph.Timing.info:type_name -> local.grpc.telegraph.Generic
	12, // 10: local.grpc.telegraph.Trace.location:type_name -> local.grpc.telegraph.Fields
	9,  // 11: local.grpc.telegraph.Trace.info:type_name -> local.grpc.telegraph.Generic
	13, // 12: local.grpc.telegraph.Record.empty:type_name -> local.grpc.telegraph.Empty
	14, // 13: local.grpc.telegraph.Record.ack:type_name -> local.grpc.telegraph.Ack
	2,  // 14: local.grpc.telegraph.Record.registration:type_name -> local.grpc.telegraph.Registration
	3,  // 15: local.grpc.telegraph.Record.status:type_name -> local.grpc.telegraph.Status
	5,  // 16: local.grpc.telegraph.Record.incident:type_name -> local.grpc.telegraph.Incident
	4,  // 17: local.grpc.telegraph.Record.metrics:type_name -> local.grpc.telegraph.Metrics
	6,  // 18: local.grpc.telegraph.Record.timing:type_name -> local.grpc.telegraph.Timing
	7,  // 19: local.grpc.telegraph.Record.trace:type_name -> local.grpc.telegraph.Trace
	9,  // 20: local.grpc.telegraph.Record.generic:type_name -> local.grpc.telegraph.Generic
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_records_proto_init() }
func file_records_proto_init() {
	if File_records_proto != nil {
		return
	}
	file_base_proto_init()
	file_records_proto_msgTypes[6].OneofWrappers = []any{
		(*Record_Empty)(nil),
		(*Record_Ack)(nil),
		(*Record_Registration)(nil),
		(*Record_Status)(nil),
		(*Record_Incident)(nil),
		(*Record_Metrics)(nil),
		(*Record_Timing)(nil),
		(*Record_Trace)(nil),
		(*Record_Generic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_records_proto_rawDesc), len(file_records_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_records_proto_goTypes,
		DependencyIndexes: file_records_proto_depIdxs,
		EnumInfos:         file_records_proto_enumTypes,
		MessageInfos:      file_records_proto_msgTypes,
	}.Build()
	File_records_proto = out.File
	file_records_proto_goTypes = nil
	file_records_proto_depIdxs = nil
}
