// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: telegraph.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note can be either a record (basically events and messages sent from the
// device) or it can be a subscription sent by the device.
type Note struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Note_Empty
	//	*Note_Record
	//	*Note_Subscription
	//	*Note_Generic
	Kind          isNote_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Note) Reset() {
	*x = Note{}
	mi := &file_telegraph_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_telegraph_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_telegraph_proto_rawDescGZIP(), []int{0}
}

func (x *Note) GetKind() isNote_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Note) GetEmpty() *Empty {
	if x != nil {
		if x, ok := x.Kind.(*Note_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

func (x *Note) GetRecord() *Record {
	if x != nil {
		if x, ok := x.Kind.(*Note_Record); ok {
			return x.Record
		}
	}
	return nil
}

func (x *Note) GetSubscription() *Subscription {
	if x != nil {
		if x, ok := x.Kind.(*Note_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

func (x *Note) GetGeneric() *Generic {
	if x != nil {
		if x, ok := x.Kind.(*Note_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

type isNote_Kind interface {
	isNote_Kind()
}

type Note_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type Note_Record struct {
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3,oneof"` // vinyl - go discogs!
}

type Note_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"`
}

type Note_Generic struct {
	// Leave some room for growth - #15 still takes only 1 byte to encode.
	Generic *Generic `protobuf:"bytes,15,opt,name=generic,proto3,oneof"`
}

func (*Note_Empty) isNote_Kind() {}

func (*Note_Record) isNote_Kind() {}

func (*Note_Subscription) isNote_Kind() {}

func (*Note_Generic) isNote_Kind() {}

// Answer sent from the service ... normally an ACK or a publication.
type Answer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Answer_Empty
	//	*Answer_Ack
	//	*Answer_Publication
	//	*Answer_Generic
	Kind          isAnswer_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_telegraph_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_telegraph_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_telegraph_proto_rawDescGZIP(), []int{1}
}

func (x *Answer) GetKind() isAnswer_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Answer) GetEmpty() *Empty {
	if x != nil {
		if x, ok := x.Kind.(*Answer_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

func (x *Answer) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Kind.(*Answer_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *Answer) GetPublication() *Publication {
	if x != nil {
		if x, ok := x.Kind.(*Answer_Publication); ok {
			return x.Publication
		}
	}
	return nil
}

func (x *Answer) GetGeneric() *Generic {
	if x != nil {
		if x, ok := x.Kind.(*Answer_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

type isAnswer_Kind interface {
	isAnswer_Kind()
}

type Answer_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type Answer_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type Answer_Publication struct {
	Publication *Publication `protobuf:"bytes,3,opt,name=publication,proto3,oneof"` // please like and subscribe!
}

type Answer_Generic struct {
	// Leave some room for growth - #15 still takes only 1 byte to encode.
	Generic *Generic `protobuf:"bytes,15,opt,name=generic,proto3,oneof"`
}

func (*Answer_Empty) isAnswer_Kind() {}

func (*Answer_Ack) isAnswer_Kind() {}

func (*Answer_Publication) isAnswer_Kind() {}

func (*Answer_Generic) isAnswer_Kind() {}

// A Communique is basically a "packaged" note sent from the device.
// A long time ago came a man on a track, walking 30 miles with a sack
// on his back ...
type Communique struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Envelope      *Envelope              `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Credentials   *Credentials           `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Note          *Note                  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"` // CDEFGAB!
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Communique) Reset() {
	*x = Communique{}
	mi := &file_telegraph_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Communique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communique) ProtoMessage() {}

func (x *Communique) ProtoReflect() protoreflect.Message {
	mi := &file_telegraph_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communique.ProtoReflect.Descriptor instead.
func (*Communique) Descriptor() ([]byte, []int) {
	return file_telegraph_proto_rawDescGZIP(), []int{2}
}

func (x *Communique) GetEnvelope() *Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *Communique) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Communique) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

// Response from the service.
type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Envelope      *Envelope              `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Answer        *Answer                `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_telegraph_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_telegraph_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_telegraph_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetEnvelope() *Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *Response) GetAnswer() *Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

var File_telegraph_proto protoreflect.FileDescriptor

var file_telegraph_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a,
	0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0xf6, 0x01, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x45,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x32, 0xe2, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a, 0x1e,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x51, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6f, 0x74, 0x61, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_telegraph_proto_rawDescOnce sync.Once
	file_telegraph_proto_rawDescData []byte
)

func file_telegraph_proto_rawDescGZIP() []byte {
	file_telegraph_proto_rawDescOnce.Do(func() {
		file_telegraph_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telegraph_proto_rawDesc), len(file_telegraph_proto_rawDesc)))
	})
	return file_telegraph_proto_rawDescData
}

var file_telegraph_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_telegraph_proto_goTypes = []any{
	(*Note)(nil),         // 0: local.grpc.telegraph.Note
	(*Answer)(nil),       // 1: local.grpc.telegraph.Answer
	(*Communique)(nil),   // 2: local.grpc.telegraph.Communique
	(*Response)(nil),     // 3: local.grpc.telegraph.Response
	(*Empty)(nil),        // 4: local.grpc.telegraph.Empty
	(*Record)(nil),       // 5: local.grpc.telegraph.Record
	(*Subscription)(nil), // 6: local.grpc.telegraph.Subscription
	(*Generic)(nil),      // 7: local.grpc.telegraph.Generic
	(*Ack)(nil),          // 8: local.grpc.telegraph.Ack
	(*Publication)(nil),  // 9: local.grpc.telegraph.Publication
	(*Envelope)(nil),     // 10: local.grpc.telegraph.Envelope
	(*Credentials)(nil),  // 11: local.grpc.telegraph.Credentials
}
var file_telegraph_proto_depIdxs = []int32{
	4,  // 0: local.grpc.telegraph.Note.empty:type_name -> local.grpc.telegraph.Empty
	5,  // 1: local.grpc.telegraph.Note.record:type_name -> local.grpc.telegraph.Record
	6,  // 2: local.grpc.telegraph.Note.subscription:type_name -> local.grpc.telegraph.Subscription
	7,  // 3: local.grpc.telegraph.Note.generic:type_name -> local.grpc.telegraph.Generic
	4,  // 4: local.grpc.telegraph.Answer.empty:type_name -> local.grpc.telegraph.Empty
	8,  // 5: local.grpc.telegraph.Answer.ack:type_name -> local.grpc.telegraph.Ack
	9,  // 6: local.grpc.telegraph.Answer.publication:type_name -> local.grpc.telegraph.Publication
	7,  // 7: local.grpc.telegraph.Answer.generic:type_name -> local.grpc.telegraph.Generic
	10, // 8: local.grpc.telegraph.Communique.envelope:type_name -> local.grpc.telegraph.Envelope
	11, // 9: local.grpc.telegraph.Communique.credentials:type_name -> local.grpc.telegraph.Credentials
	0,  // 10: local.grpc.telegraph.Communique.note:type_name -> local.grpc.telegraph.Note
	10, // 11: local.grpc.telegraph.Response.envelope:type_name -> local.grpc.telegraph.Envelope
	1,  // 12: local.grpc.telegraph.Response.answer:type_name -> local.grpc.telegraph.Answer
	2,  // 13: local.grpc.telegraph.TelegraphService.Dispatch:input_type -> local.grpc.telegraph.Communique
	2,  // 14: local.grpc.telegraph.TelegraphService.DispatchUnary:input_type -> local.grpc.telegraph.Communique
	2,  // 15: local.grpc.telegraph.TelegraphService.DispatchStream:input_type -> local.grpc.telegraph.Communique
	2,  // 16: local.grpc.telegraph.TelegraphService.Subscribe:input_type -> local.grpc.telegraph.Communique
	3,  // 17: local.grpc.telegraph.TelegraphService.Dispatch:output_type -> local.grpc.telegraph.Response
	3,  // 18: local.grpc.telegraph.TelegraphService.DispatchUnary:output_type -> local.grpc.telegraph.Response
	3,  // 19: local.grpc.telegraph.TelegraphService.DispatchStream:output_type -> local.grpc.telegraph.Response
	3,  // 20: local.grpc.telegraph.TelegraphService.Subscribe:output_type -> local.grpc.telegraph.Response
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_telegraph_proto_init() }
func file_telegraph_proto_init() {
	if File_telegraph_proto != nil {
		return
	}
	file_base_proto_init()
	file_pubsub_proto_init()
	file_records_proto_init()
	file_wire_proto_init()
	file_telegraph_proto_msgTypes[0].OneofWrappers = []any{
		(*Note_Empty)(nil),
		(*Note_Record)(nil),
		(*Note_Subscription)(nil),
		(*Note_Generic)(nil),
	}
	file_telegraph_proto_msgTypes[1].OneofWrappers = []any{
		(*Answer_Empty)(nil),
		(*Answer_Ack)(nil),
		(*Answer_Publication)(nil),
		(*Answer_Generic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telegraph_proto_rawDesc), len(file_telegraph_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telegraph_proto_goTypes,
		DependencyIndexes: file_telegraph_proto_depIdxs,
		MessageInfos:      file_telegraph_proto_msgTypes,
	}.Build()
	File_telegraph_proto = out.File
	file_telegraph_proto_goTypes = nil
	file_telegraph_proto_depIdxs = nil
}
